{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///H:/Next-Level-Development/Assignment/Assignment-7/raufurislam-portfolio-client/src/components/theme-provider.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\";\r\n\r\nexport function ThemeProvider({\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof NextThemesProvider>) {\r\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\r\n}\r\n"],"names":[],"mappings":";;;;;AAGA;AAHA;;;AAKO,SAAS,cAAc,KAGoB;QAHpB,EAC5B,QAAQ,EACR,GAAG,OAC6C,GAHpB;IAI5B,qBAAO,4TAAC,6QAAkB;QAAE,GAAG,KAAK;kBAAG;;;;;;AACzC;KALgB","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///H:/Next-Level-Development/Assignment/Assignment-7/raufurislam-portfolio-client/src/lib/auth-utils.ts"],"sourcesContent":["/**\r\n * Authentication utilities for handling tokens in both cookies and localStorage\r\n * This provides a fallback mechanism for production environments where cookies might not work properly\r\n */\r\n\r\nexport interface AuthTokens {\r\n  accessToken?: string;\r\n  refreshToken?: string;\r\n}\r\n\r\nexport interface UserData {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  role: \"USER\" | \"ADMIN\" | \"SUPER_ADMIN\";\r\n  isEmailVerified: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nclass AuthUtils {\r\n  private readonly ACCESS_TOKEN_KEY = \"accessToken\";\r\n  private readonly REFRESH_TOKEN_KEY = \"refreshToken\";\r\n  private readonly USER_DATA_KEY = \"userData\";\r\n\r\n  /**\r\n   * Get access token from localStorage (fallback for production)\r\n   */\r\n  getAccessToken(): string | null {\r\n    if (typeof window === \"undefined\") return null;\r\n    return localStorage.getItem(this.ACCESS_TOKEN_KEY);\r\n  }\r\n\r\n  /**\r\n   * Get refresh token from localStorage (fallback for production)\r\n   */\r\n  getRefreshToken(): string | null {\r\n    if (typeof window === \"undefined\") return null;\r\n    return localStorage.getItem(this.REFRESH_TOKEN_KEY);\r\n  }\r\n\r\n  /**\r\n   * Get user data from localStorage\r\n   */\r\n  getUserData(): UserData | null {\r\n    if (typeof window === \"undefined\") return null;\r\n    try {\r\n      const userData = localStorage.getItem(this.USER_DATA_KEY);\r\n      if (!userData) return null;\r\n\r\n      const parsed = JSON.parse(userData);\r\n      // Ensure all required fields are present\r\n      return {\r\n        _id: parsed._id || \"\",\r\n        email: parsed.email || \"\",\r\n        name: parsed.name || \"\",\r\n        role: parsed.role || \"USER\",\r\n        isEmailVerified: parsed.isEmailVerified ?? false,\r\n        createdAt: parsed.createdAt || new Date().toISOString(),\r\n        updatedAt: parsed.updatedAt || new Date().toISOString(),\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error parsing user data from localStorage:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store access token in localStorage\r\n   */\r\n  setAccessToken(token: string): void {\r\n    if (typeof window === \"undefined\") return;\r\n    localStorage.setItem(this.ACCESS_TOKEN_KEY, token);\r\n  }\r\n\r\n  /**\r\n   * Store refresh token in localStorage\r\n   */\r\n  setRefreshToken(token: string): void {\r\n    if (typeof window === \"undefined\") return;\r\n    localStorage.setItem(this.REFRESH_TOKEN_KEY, token);\r\n  }\r\n\r\n  /**\r\n   * Store user data in localStorage\r\n   */\r\n  setUserData(userData: UserData | Partial<UserData>): void {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    // Ensure all required fields are present\r\n    const completeUserData: UserData = {\r\n      _id: userData._id || \"\",\r\n      email: userData.email || \"\",\r\n      name: userData.name || \"\",\r\n      role: userData.role || \"USER\",\r\n      isEmailVerified: userData.isEmailVerified ?? false,\r\n      createdAt: userData.createdAt || new Date().toISOString(),\r\n      updatedAt: userData.updatedAt || new Date().toISOString(),\r\n    };\r\n\r\n    localStorage.setItem(this.USER_DATA_KEY, JSON.stringify(completeUserData));\r\n  }\r\n\r\n  /**\r\n   * Store all auth data in localStorage\r\n   */\r\n  setAuthData(\r\n    tokens: AuthTokens,\r\n    userData?: UserData | Partial<UserData>\r\n  ): void {\r\n    if (tokens.accessToken) {\r\n      this.setAccessToken(tokens.accessToken);\r\n    }\r\n    if (tokens.refreshToken) {\r\n      this.setRefreshToken(tokens.refreshToken);\r\n    }\r\n    if (userData) {\r\n      this.setUserData(userData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all auth data from localStorage\r\n   */\r\n  clearAuthData(): void {\r\n    if (typeof window === \"undefined\") return;\r\n    localStorage.removeItem(this.ACCESS_TOKEN_KEY);\r\n    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\r\n    localStorage.removeItem(this.USER_DATA_KEY);\r\n  }\r\n\r\n  /**\r\n   * Check if user is authenticated (has valid access token)\r\n   */\r\n  isAuthenticated(): boolean {\r\n    const token = this.getAccessToken();\r\n    if (!token) return false;\r\n\r\n    try {\r\n      // Basic JWT validation - check if token is not expired\r\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\r\n      const currentTime = Math.floor(Date.now() / 1000);\r\n      return payload.exp > currentTime;\r\n    } catch (error) {\r\n      console.error(\"Error validating token:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user is super admin\r\n   */\r\n  isSuperAdmin(): boolean {\r\n    const userData = this.getUserData();\r\n    return userData?.role === \"SUPER_ADMIN\" && userData?.name === \"Super admin\";\r\n  }\r\n\r\n  /**\r\n   * Get token from cookies (for server-side middleware)\r\n   */\r\n  getTokenFromCookies(cookieString: string, tokenName: string): string | null {\r\n    if (!cookieString) return null;\r\n\r\n    const cookies = cookieString.split(\";\").reduce((acc, cookie) => {\r\n      const [key, value] = cookie.trim().split(\"=\");\r\n      acc[key] = value;\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n\r\n    return cookies[tokenName] || null;\r\n  }\r\n\r\n  /**\r\n   * Validate JWT token\r\n   */\r\n  validateToken(token: string): boolean {\r\n    if (!token) return false;\r\n\r\n    try {\r\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\r\n      const currentTime = Math.floor(Date.now() / 1000);\r\n      return payload.exp > currentTime;\r\n    } catch (error) {\r\n      console.error(\"Error validating token:\", error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const authUtils = new AuthUtils();\r\n\r\n// Export individual functions for convenience\r\nexport const {\r\n  getAccessToken,\r\n  getRefreshToken,\r\n  getUserData,\r\n  setAccessToken,\r\n  setRefreshToken,\r\n  setUserData,\r\n  setAuthData,\r\n  clearAuthData,\r\n  isAuthenticated,\r\n  isSuperAdmin,\r\n  getTokenFromCookies,\r\n  validateToken,\r\n} = authUtils;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///H:/Next-Level-Development/Assignment/Assignment-7/raufurislam-portfolio-client/src/services/AuthServices/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n// services\\AuthServices\r\nimport {\r\n  ILoginCredentials,\r\n  ILoginResponse,\r\n  IRegisterCredentials,\r\n  IRegisterResponse,\r\n  IApiResponse,\r\n  IAuthTokens,\r\n} from \"@/types\";\r\nimport { authUtils } from \"@/lib/auth-utils\";\r\n\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_BASE_API;\r\n\r\nclass AuthService {\r\n  private async handleResponse<T>(response: Response): Promise<T> {\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(\r\n        errorData.message || `HTTP error! status: ${response.status}`\r\n      );\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async login(credentials: ILoginCredentials): Promise<ILoginResponse> {\r\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    return this.handleResponse<ILoginResponse>(response);\r\n  }\r\n\r\n  async register(\r\n    credentials: IRegisterCredentials\r\n  ): Promise<IRegisterResponse> {\r\n    const response = await fetch(`${API_BASE_URL}/user/register`, {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    return this.handleResponse<IRegisterResponse>(response);\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    const response = await fetch(`${API_BASE_URL}/auth/logout`, {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Even if logout fails on server, we should clear local state\r\n      console.warn(\"Logout request failed, but clearing local state\");\r\n    }\r\n  }\r\n\r\n  async refreshAccessToken(): Promise<IAuthTokens> {\r\n    const response = await fetch(`${API_BASE_URL}/auth/refresh-token`, {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n    });\r\n\r\n    return this.handleResponse<IApiResponse<IAuthTokens>>(response).then(\r\n      (res) => res.data\r\n    );\r\n  }\r\n\r\n  async getCurrentUser(): Promise<any> {\r\n    // First try to get from localStorage (for production fallback)\r\n    const localUserData = authUtils.getUserData();\r\n    const localAccessToken = authUtils.getAccessToken();\r\n\r\n    if (localUserData && localAccessToken && authUtils.isAuthenticated()) {\r\n      console.log(\"✅ Using cached user data from localStorage\");\r\n      return localUserData;\r\n    }\r\n\r\n    // If no valid local data, try server\r\n    const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    });\r\n\r\n    if (response.status === 401) {\r\n      // Clear any stale local data\r\n      authUtils.clearAuthData();\r\n      return null; // User not authenticated\r\n    }\r\n\r\n    const userData = await this.handleResponse<IApiResponse>(response).then(\r\n      (res) => res.data\r\n    );\r\n\r\n    // Store user data in localStorage as backup\r\n    if (userData) {\r\n      authUtils.setUserData(userData);\r\n    }\r\n\r\n    return userData;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const authService = new AuthService();\r\n\r\n// Legacy exports for backward compatibility\r\nexport const loginUser = (credentials: ILoginCredentials) =>\r\n  authService.login(credentials);\r\nexport const registerUser = (credentials: IRegisterCredentials) =>\r\n  authService.register(credentials);\r\nexport const logoutUser = () => authService.logout();\r\n"],"names":[],"mappings":"AAAA,qDAAqD,GAErD,wBAAwB;;;;;;;;;;;AAWH;AAFrB;;AAEA,MAAM;AAEN,MAAM;IACJ,MAAc,eAAkB,QAAkB,EAAc;QAC9D,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAC,CAAC;YACvD,MAAM,IAAI,MACR,UAAU,OAAO,IAAI,AAAC,uBAAsC,OAAhB,SAAS,MAAM;QAE/D;QACA,OAAO,SAAS,IAAI;IACtB;IAEA,MAAM,MAAM,WAA8B,EAA2B;QACnE,MAAM,WAAW,MAAM,MAAM,AAAC,GAAe,OAAb,cAAa,gBAAc;YACzD,QAAQ;YACR,aAAa;YACb,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,OAAO,IAAI,CAAC,cAAc,CAAiB;IAC7C;IAEA,MAAM,SACJ,WAAiC,EACL;QAC5B,MAAM,WAAW,MAAM,MAAM,AAAC,GAAe,OAAb,cAAa,mBAAiB;YAC5D,QAAQ;YACR,aAAa;YACb,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,OAAO,IAAI,CAAC,cAAc,CAAoB;IAChD;IAEA,MAAM,SAAwB;QAC5B,MAAM,WAAW,MAAM,MAAM,AAAC,GAAe,OAAb,cAAa,iBAAe;YAC1D,QAAQ;YACR,aAAa;QACf;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,8DAA8D;YAC9D,QAAQ,IAAI,CAAC;QACf;IACF;IAEA,MAAM,qBAA2C;QAC/C,MAAM,WAAW,MAAM,MAAM,AAAC,GAAe,OAAb,cAAa,wBAAsB;YACjE,QAAQ;YACR,aAAa;QACf;QAEA,OAAO,IAAI,CAAC,cAAc,CAA4B,UAAU,IAAI,CAClE,CAAC,MAAQ,IAAI,IAAI;IAErB;IAEA,MAAM,iBAA+B;QACnC,+DAA+D;QAC/D,MAAM,gBAAgB,2IAAS,CAAC,WAAW;QAC3C,MAAM,mBAAmB,2IAAS,CAAC,cAAc;QAEjD,IAAI,iBAAiB,oBAAoB,2IAAS,CAAC,eAAe,IAAI;YACpE,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;QAEA,qCAAqC;QACrC,MAAM,WAAW,MAAM,MAAM,AAAC,GAAe,OAAb,cAAa,aAAW;YACtD,QAAQ;YACR,aAAa;QACf;QAEA,IAAI,SAAS,MAAM,KAAK,KAAK;YAC3B,6BAA6B;YAC7B,2IAAS,CAAC,aAAa;YACvB,OAAO,MAAM,yBAAyB;QACxC;QAEA,MAAM,WAAW,MAAM,IAAI,CAAC,cAAc,CAAe,UAAU,IAAI,CACrE,CAAC,MAAQ,IAAI,IAAI;QAGnB,4CAA4C;QAC5C,IAAI,UAAU;YACZ,2IAAS,CAAC,WAAW,CAAC;QACxB;QAEA,OAAO;IACT;AACF;AAGO,MAAM,cAAc,IAAI;AAGxB,MAAM,YAAY,CAAC,cACxB,YAAY,KAAK,CAAC;AACb,MAAM,eAAe,CAAC,cAC3B,YAAY,QAAQ,CAAC;AAChB,MAAM,aAAa,IAAM,YAAY,MAAM","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///H:/Next-Level-Development/Assignment/Assignment-7/raufurislam-portfolio-client/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  ReactNode,\r\n} from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { toast } from \"sonner\";\r\nimport {\r\n  IUser,\r\n  ILoginCredentials,\r\n  IRegisterCredentials,\r\n  IAuthContext,\r\n} from \"@/types\";\r\nimport { authService } from \"@/services/AuthServices\";\r\nimport { authUtils } from \"@/lib/auth-utils\";\r\n\r\nconst AuthContext = createContext<IAuthContext | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function AuthProvider({ children }: AuthProviderProps) {\r\n  const [user, setUser] = useState<IUser | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const router = useRouter();\r\n\r\n  const isAuthenticated = !!user;\r\n  const isSuperAdmin =\r\n    user?.role === \"SUPER_ADMIN\" && user?.name === \"Super admin\";\r\n\r\n  // Initialize auth state on mount\r\n  useEffect(() => {\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const initializeAuth = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      console.log(\"🔍 Initializing auth...\");\r\n      console.log(\"🔍 API URL:\", process.env.NEXT_PUBLIC_BASE_API);\r\n      console.log(\"🔍 Current cookies:\", document.cookie);\r\n\r\n      // First, try to get user from localStorage (for production fallback)\r\n      const localUserData = authUtils.getUserData();\r\n      const localAccessToken = authUtils.getAccessToken();\r\n      \r\n      if (localUserData && localAccessToken && authUtils.isAuthenticated()) {\r\n        console.log(\"✅ Found valid user data in localStorage:\", localUserData);\r\n        setUser(localUserData as IUser);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      // If no valid local data, try to get from server\r\n      const userData = await authService.getCurrentUser();\r\n      console.log(\"🔍 getCurrentUser response:\", userData);\r\n\r\n      if (userData) {\r\n        setUser(userData);\r\n        // Store in localStorage as backup\r\n        authUtils.setUserData(userData);\r\n        console.log(\"✅ User set in context and localStorage:\", userData);\r\n      } else {\r\n        console.log(\"❌ No user data received, clearing user state\");\r\n        setUser(null);\r\n        authUtils.clearAuthData();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Failed to initialize auth:\", error);\r\n      // Clear any stale auth data\r\n      setUser(null);\r\n      authUtils.clearAuthData();\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (credentials: ILoginCredentials) => {\r\n    try {\r\n      setIsLoading(true);\r\n      console.log(\"🔐 Starting login process...\");\r\n      const response = await authService.login(credentials);\r\n      console.log(\"🔐 Login response:\", response);\r\n\r\n      if (response.success && response.data.user) {\r\n        setUser(response.data.user);\r\n        \r\n        // Store user data in localStorage as backup\r\n        authUtils.setUserData(response.data.user);\r\n        \r\n        // If tokens are provided, store them too\r\n        if (response.data.accessToken) {\r\n          authUtils.setAccessToken(response.data.accessToken);\r\n        }\r\n        if (response.data.refreshToken) {\r\n          authUtils.setRefreshToken(response.data.refreshToken);\r\n        }\r\n        \r\n        console.log(\"✅ Login successful, user set:\", response.data.user);\r\n        console.log(\"🍪 Cookies after login:\", document.cookie);\r\n        console.log(\"💾 Stored in localStorage:\", authUtils.getUserData());\r\n        toast.success(response.message || \"Login successful!\");\r\n\r\n        // Redirect to home page\r\n        router.push(\"/\");\r\n      } else {\r\n        throw new Error(response.message || \"Login failed\");\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error(\"❌ Login error:\", error);\r\n      const errorMessage =\r\n        error instanceof Error\r\n          ? error.message\r\n          : \"Login failed. Please try again.\";\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (credentials: IRegisterCredentials) => {\r\n    try {\r\n      setIsLoading(true);\r\n      // Step 1: Register the user\r\n      const registerResponse = await authService.register(credentials);\r\n\r\n      if (registerResponse.success) {\r\n        toast.success(registerResponse.message || \"Registration successful!\");\r\n\r\n        // Step 2: Auto-login after successful registration\r\n        try {\r\n          const loginResponse = await authService.login({\r\n            email: credentials.email,\r\n            password: credentials.password,\r\n          });\r\n\r\n          if (loginResponse.success && loginResponse.data.user) {\r\n            setUser(loginResponse.data.user);\r\n            \r\n            // Store user data in localStorage as backup\r\n            authUtils.setUserData(loginResponse.data.user);\r\n            \r\n            // If tokens are provided, store them too\r\n            if (loginResponse.data.accessToken) {\r\n              authUtils.setAccessToken(loginResponse.data.accessToken);\r\n            }\r\n            if (loginResponse.data.refreshToken) {\r\n              authUtils.setRefreshToken(loginResponse.data.refreshToken);\r\n            }\r\n            \r\n            toast.success(\"Welcome! You are now logged in.\");\r\n          }\r\n        } catch (loginError: unknown) {\r\n          // Registration successful but auto-login failed\r\n          console.log(\"Auto-login failed after registration:\", loginError);\r\n          toast.success(\"Registration successful! Please login manually.\");\r\n          router.push(\"/login\");\r\n          return;\r\n        }\r\n\r\n        // Redirect to home page\r\n        router.push(\"/\");\r\n      } else {\r\n        throw new Error(registerResponse.message || \"Registration failed\");\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error(\"Registration error:\", error);\r\n      const errorMessage =\r\n        error instanceof Error\r\n          ? error.message\r\n          : \"Registration failed. Please try again.\";\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      await authService.logout();\r\n      setUser(null);\r\n      // Clear localStorage data\r\n      authUtils.clearAuthData();\r\n      toast.success(\"Logged out successfully\");\r\n      router.push(\"/\");\r\n    } catch (error: unknown) {\r\n      console.error(\"Logout error:\", error);\r\n      // Even if logout fails on server, clear local state\r\n      setUser(null);\r\n      authUtils.clearAuthData();\r\n      toast.success(\"Logged out successfully\");\r\n      router.push(\"/\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshToken = async (): Promise<void> => {\r\n    try {\r\n      const tokens = await authService.refreshAccessToken();\r\n      // Tokens are automatically stored in cookies by the server\r\n      // Also store in localStorage as backup\r\n      if (tokens.accessToken) {\r\n        authUtils.setAccessToken(tokens.accessToken);\r\n      }\r\n      if (tokens.refreshToken) {\r\n        authUtils.setRefreshToken(tokens.refreshToken);\r\n      }\r\n      \r\n      // Optionally update user data if the refresh token response includes it\r\n      if (tokens && (tokens as unknown as Record<string, unknown>).user) {\r\n        const userData = (tokens as unknown as Record<string, unknown>).user as IUser;\r\n        setUser(userData);\r\n        authUtils.setUserData(userData);\r\n      }\r\n      // Do not return tokens to match the IAuthContext signature (Promise<void>)\r\n    } catch (error) {\r\n      console.error(\"Token refresh failed:\", error);\r\n      // If refresh fails, user needs to login again\r\n      setUser(null);\r\n      authUtils.clearAuthData();\r\n      router.push(\"/login\");\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value: IAuthContext = {\r\n    user,\r\n    isLoading,\r\n    isAuthenticated,\r\n    login,\r\n    register,\r\n    logout,\r\n    refreshToken,\r\n    isSuperAdmin,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\n// Higher-order component for protecting routes\r\nexport function withAuth<P extends object>(\r\n  WrappedComponent: React.ComponentType<P>,\r\n  options: { redirectTo?: string; requireAuth?: boolean } = {}\r\n) {\r\n  const { redirectTo = \"/login\", requireAuth = true } = options;\r\n\r\n  return function AuthenticatedComponent(props: P) {\r\n    const { user, isLoading } = useAuth();\r\n    const router = useRouter();\r\n\r\n    useEffect(() => {\r\n      if (!isLoading) {\r\n        if (requireAuth && !user) {\r\n          router.push(redirectTo);\r\n        } else if (!requireAuth && user) {\r\n          router.push(\"/dashboard\");\r\n        }\r\n      }\r\n    }, [user, isLoading, router]);\r\n\r\n    if (isLoading) {\r\n      return (\r\n        <div className=\"flex items-center justify-center min-h-screen\">\r\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (requireAuth && !user) {\r\n      return null; // Will redirect\r\n    }\r\n\r\n    if (!requireAuth && user) {\r\n      return null; // Will redirect\r\n    }\r\n\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 626, "column": 0}, "map": {"version":3,"sources":["file:///H:/Next-Level-Development/Assignment/Assignment-7/raufurislam-portfolio-client/src/components/ui/sonner.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useTheme } from \"next-themes\";\r\nimport { Toaster as Sonner, ToasterProps } from \"sonner\";\r\n\r\nconst Toaster = ({ ...props }: ToasterProps) => {\r\n  const { theme = \"system\" } = useTheme();\r\n\r\n  return (\r\n    <Sonner\r\n      theme={(theme as ToasterProps[\"theme\"]) ?? \"system\"}\r\n      className=\"toaster group\"\r\n      style={\r\n        {\r\n          \"--normal-bg\": \"var(--popover)\",\r\n          \"--normal-text\": \"var(--popover-foreground)\",\r\n          \"--normal-border\": \"var(--border)\",\r\n        } as React.CSSProperties\r\n      }\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport { Toaster };\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;AAHA;;;AAKA,MAAM,UAAU;QAAC,EAAE,GAAG,OAAqB;;IACzC,MAAM,EAAE,QAAQ,QAAQ,EAAE,GAAG,IAAA,wQAAQ;QAI1B;IAFX,qBACE,4TAAC,sRAAM;QACL,OAAO,CAAA,OAAC,mBAAD,kBAAA,OAAoC;QAC3C,WAAU;QACV,OACE;YACE,eAAe;YACf,iBAAiB;YACjB,mBAAmB;QACrB;QAED,GAAG,KAAK;;;;;;AAGf;GAjBM;;QACyB,wQAAQ;;;KADjC","debugId":null}}]
}