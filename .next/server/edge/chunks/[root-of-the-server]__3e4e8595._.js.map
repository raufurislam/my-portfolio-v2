{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/server-auth.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { cookies } from \"next/headers\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\n// JWT payload interface\r\ninterface JWTPayload {\r\n  userId: string;\r\n  email: string;\r\n  role: string;\r\n  exp: number;\r\n  iat: number;\r\n}\r\n\r\n// User interface\r\ninterface UserInfo {\r\n  _id: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\n/**\r\n * Get current user from server-side cookies\r\n * This function runs on the server and can access httpOnly cookies\r\n */\r\nexport async function getCurrentUser(): Promise<UserInfo | null> {\r\n  try {\r\n    const cookieStore = await cookies();\r\n    const accessToken = cookieStore.get(\"accessToken\")?.value;\r\n\r\n    if (!accessToken) {\r\n      console.log(\"üîç No access token found in cookies\");\r\n      return null;\r\n    }\r\n\r\n    // Decode JWT token using jwtDecode\r\n    const decoded = jwtDecode<JWTPayload>(accessToken);\r\n\r\n    if (!decoded) {\r\n      console.log(\"üîç Failed to decode access token\");\r\n      return null;\r\n    }\r\n\r\n    // Check if token is expired\r\n    const currentTime = Math.floor(Date.now() / 1000);\r\n    if (decoded.exp < currentTime) {\r\n      console.log(\"üîç Access token is expired\");\r\n      return null;\r\n    }\r\n\r\n    const userInfo: UserInfo = {\r\n      _id: decoded.userId,\r\n      email: decoded.email,\r\n      role: decoded.role,\r\n    };\r\n\r\n    console.log(\"‚úÖ User authenticated:\", userInfo);\r\n    return userInfo;\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error getting current user:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if user is super admin\r\n */\r\nexport async function isSuperAdmin(): Promise<boolean> {\r\n  const user = await getCurrentUser();\r\n  return user?.role === \"SUPER_ADMIN\";\r\n}\r\n\r\n/**\r\n * Check if user is authenticated\r\n */\r\nexport async function isAuthenticated(): Promise<boolean> {\r\n  const user = await getCurrentUser();\r\n  return user !== null;\r\n}\r\n\r\n/**\r\n * Logout user by clearing cookies\r\n */\r\nexport async function logoutUser(): Promise<void> {\r\n  try {\r\n    const cookieStore = await cookies();\r\n    cookieStore.delete(\"accessToken\");\r\n    cookieStore.delete(\"refreshToken\");\r\n    console.log(\"‚úÖ User logged out successfully\");\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error logging out:\", error);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;AAEA;AAAA;AACA;AAHA;;;AAyBO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,IAAA,qTAAO;QACjC,MAAM,cAAc,YAAY,GAAG,CAAC,gBAAgB;QAEpD,IAAI,CAAC,aAAa;YAChB,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;QAEA,mCAAmC;QACnC,MAAM,UAAU,IAAA,qOAAS,EAAa;QAEtC,IAAI,CAAC,SAAS;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;QAEA,4BAA4B;QAC5B,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK;QAC5C,IAAI,QAAQ,GAAG,GAAG,aAAa;YAC7B,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;QAEA,MAAM,WAAqB;YACzB,KAAK,QAAQ,MAAM;YACnB,OAAO,QAAQ,KAAK;YACpB,MAAM,QAAQ,IAAI;QACpB;QAEA,QAAQ,GAAG,CAAC,yBAAyB;QACrC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF;AAKO,eAAe;IACpB,MAAM,OAAO,MAAM;IACnB,OAAO,MAAM,SAAS;AACxB;AAKO,eAAe;IACpB,MAAM,OAAO,MAAM;IACnB,OAAO,SAAS;AAClB;AAKO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,IAAA,qTAAO;QACjC,YAAY,MAAM,CAAC;QACnB,YAAY,MAAM,CAAC;QACnB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;IACxC;AACF"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport type { NextRequest } from \"next/server\";\r\nimport { getCurrentUser } from \"@/lib/server-auth\";\r\n\r\n// Define protected routes that require super admin access\r\nconst protectedRoutes = [\"/dashboard\"];\r\nconst authRoutes = [\"/login\", \"/register\"];\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const { pathname } = request.nextUrl;\r\n\r\n  console.log(\"üîí Middleware processing:\", pathname);\r\n\r\n  // Check if the current route is protected (super admin only)\r\n  const isProtected = protectedRoutes.some((route) =>\r\n    pathname.startsWith(route)\r\n  );\r\n\r\n  // Check if the current route is an auth route (login/register)\r\n  const isAuth = authRoutes.some((route) => pathname.startsWith(route));\r\n\r\n  // Get user info from server-side cookies\r\n  const userInfo = await getCurrentUser();\r\n\r\n  console.log(\"üîí Middleware check:\", {\r\n    pathname,\r\n    isProtected,\r\n    isAuth,\r\n    isAuthenticated: !!userInfo,\r\n    isSuperAdmin: userInfo?.role === \"SUPER_ADMIN\",\r\n    userRole: userInfo?.role,\r\n  });\r\n\r\n  // If no user info and accessing protected route, redirect to home\r\n  if (isProtected && !userInfo) {\r\n    console.log(\"‚ùå No user info, redirecting to home\");\r\n    return NextResponse.redirect(new URL(\"/\", request.url));\r\n  }\r\n\r\n  // If user exists but not super admin and accessing protected route, redirect to home\r\n  if (isProtected && userInfo && userInfo.role !== \"SUPER_ADMIN\") {\r\n    console.log(\"‚ùå Not super admin, redirecting to home\");\r\n    return NextResponse.redirect(new URL(\"/\", request.url));\r\n  }\r\n\r\n  // If user is authenticated and trying to access auth routes, redirect to home\r\n  if (isAuth && userInfo) {\r\n    console.log(\"‚úÖ Already authenticated, redirecting to home\");\r\n    return NextResponse.redirect(new URL(\"/\", request.url));\r\n  }\r\n\r\n  console.log(\"‚úÖ Access granted\");\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\"/dashboard/:path*\", \"/login\", \"/register\"],\r\n};\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAEA;;;AAEA,0DAA0D;AAC1D,MAAM,kBAAkB;IAAC;CAAa;AACtC,MAAM,aAAa;IAAC;IAAU;CAAY;AAEnC,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,QAAQ,GAAG,CAAC,6BAA6B;IAEzC,6DAA6D;IAC7D,MAAM,cAAc,gBAAgB,IAAI,CAAC,CAAC,QACxC,SAAS,UAAU,CAAC;IAGtB,+DAA+D;IAC/D,MAAM,SAAS,WAAW,IAAI,CAAC,CAAC,QAAU,SAAS,UAAU,CAAC;IAE9D,yCAAyC;IACzC,MAAM,WAAW,MAAM,IAAA,sJAAc;IAErC,QAAQ,GAAG,CAAC,wBAAwB;QAClC;QACA;QACA;QACA,iBAAiB,CAAC,CAAC;QACnB,cAAc,UAAU,SAAS;QACjC,UAAU,UAAU;IACtB;IAEA,kEAAkE;IAClE,IAAI,eAAe,CAAC,UAAU;QAC5B,QAAQ,GAAG,CAAC;QACZ,OAAO,+TAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,qFAAqF;IACrF,IAAI,eAAe,YAAY,SAAS,IAAI,KAAK,eAAe;QAC9D,QAAQ,GAAG,CAAC;QACZ,OAAO,+TAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,8EAA8E;IAC9E,IAAI,UAAU,UAAU;QACtB,QAAQ,GAAG,CAAC;QACZ,OAAO,+TAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,QAAQ,GAAG,CAAC;IACZ,OAAO,+TAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAqB;QAAU;KAAY;AACvD"}}]
}